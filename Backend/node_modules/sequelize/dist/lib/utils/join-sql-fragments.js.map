{
  "version": 3,
  "sources": ["../../../lib/utils/join-sql-fragments.js"],
  "sourcesContent": ["'use strict';\n\nfunction doesNotWantLeadingSpace(str) {\n  return /^[;,)]/.test(str);\n}\nfunction doesNotWantTrailingSpace(str) {\n  return /\\($/.test(str);\n}\n\n/**\n * Joins an array of strings with a single space between them,\n * except for:\n * \n * - Strings starting with ';', ',' and ')', which do not get a leading space.\n * - Strings ending with '(', which do not get a trailing space.\n * \n * @param {string[]} parts\n * @returns {string}\n * @private\n */\nfunction singleSpaceJoinHelper(parts) {\n  return parts.reduce(({ skipNextLeadingSpace, result }, part) => {\n    if (skipNextLeadingSpace || doesNotWantLeadingSpace(part)) {\n      result += part.trim();\n    } else {\n      result += ` ${part.trim()}`;\n    }\n    return {\n      skipNextLeadingSpace: doesNotWantTrailingSpace(part),\n      result\n    };\n  }, {\n    skipNextLeadingSpace: true,\n    result: ''\n  }).result;\n}\n\n/**\n * Joins an array with a single space, auto trimming when needed.\n * \n * Certain elements do not get leading/trailing spaces.\n * \n * @param {any[]} array The array to be joined. Falsy values are skipped. If an\n * element is another array, this function will be called recursively on that array.\n * Otherwise, if a non-string, non-falsy value is present, a TypeError will be thrown.\n * \n * @returns {string} The joined string.\n * \n * @private\n */\nfunction joinSQLFragments(array) {\n  if (array.length === 0) return '';\n\n  // Skip falsy fragments\n  array = array.filter(x => x);\n\n  // Resolve recursive calls\n  array = array.map(fragment => {\n    if (Array.isArray(fragment)) {\n      return joinSQLFragments(fragment);\n    }\n    return fragment;\n  });\n\n  // Ensure strings\n  for (const fragment of array) {\n    if (fragment && typeof fragment !== 'string') {\n      const error = new TypeError(`Tried to construct a SQL string with a non-string, non-falsy fragment (${fragment}).`);\n      error.args = array;\n      error.fragment = fragment;\n      throw error;\n    }\n  }\n\n  // Trim fragments\n  array = array.map(x => x.trim());\n\n  // Skip full-whitespace fragments (empty after the above trim)\n  array = array.filter(x => x !== '');\n\n  return singleSpaceJoinHelper(array);\n}\nexports.joinSQLFragments = joinSQLFragments;\n"],
  "mappings": ";AAEA,iCAAiC,KAAK;AACpC,SAAO,SAAS,KAAK;AAAA;AAEvB,kCAAkC,KAAK;AACrC,SAAO,MAAM,KAAK;AAAA;AAcpB,+BAA+B,OAAO;AACpC,SAAO,MAAM,OAAO,CAAC,EAAE,sBAAsB,UAAU,SAAS;AAC9D,QAAI,wBAAwB,wBAAwB,OAAO;AACzD,gBAAU,KAAK;AAAA,WACV;AACL,gBAAU,IAAI,KAAK;AAAA;AAErB,WAAO;AAAA,MACL,sBAAsB,yBAAyB;AAAA,MAC/C;AAAA;AAAA,KAED;AAAA,IACD,sBAAsB;AAAA,IACtB,QAAQ;AAAA,KACP;AAAA;AAgBL,0BAA0B,OAAO;AAC/B,MAAI,MAAM,WAAW;AAAG,WAAO;AAG/B,UAAQ,MAAM,OAAO,OAAK;AAG1B,UAAQ,MAAM,IAAI,cAAY;AAC5B,QAAI,MAAM,QAAQ,WAAW;AAC3B,aAAO,iBAAiB;AAAA;AAE1B,WAAO;AAAA;AAIT,aAAW,YAAY,OAAO;AAC5B,QAAI,YAAY,OAAO,aAAa,UAAU;AAC5C,YAAM,QAAQ,IAAI,UAAU,0EAA0E;AACtG,YAAM,OAAO;AACb,YAAM,WAAW;AACjB,YAAM;AAAA;AAAA;AAKV,UAAQ,MAAM,IAAI,OAAK,EAAE;AAGzB,UAAQ,MAAM,OAAO,OAAK,MAAM;AAEhC,SAAO,sBAAsB;AAAA;AAE/B,QAAQ,mBAAmB;",
  "names": []
}
